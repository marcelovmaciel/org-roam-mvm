#+title: course:HTDP
- tags :: [[file:20200516152708-programming.org][Programming]]

* Why am I reading this/ Where this might be useful/Which project or idea that I already have will benefit from this and how?
This is part of a specialization on software engineering. I intend to compose this with:
- data engineering skills
- machine learning skills
- basic general knowledge on machine learning
- nlp techniques and network analysis

This plan is to become a full fledged computational politologist lol or simply pagar boletos (the actual reason).
* Struct questions

** What are the specific arguments of the text? :ATTACH:
:PROPERTIES:
:ID:       8cdf40db-ce72-471f-bbd2-f498630b62d6
:END:
- An expression is anything of the form (<primitive> <expression> ...)
- Rules to evaluate primitive calls:
  - reduce operands to values
  - then apply primitive to the vaules
- If you only had functions, you could write any program. That is the universality of lambda calculus at work here and so on.

- Example of a fully designed function
  #+begin_src racket
#lang htdp-beginner
;; (Signature) Number -> Number
;; (Purpose) produce 2 times the given number


; (stub) (define (double n) 0 )

(check-expect (double  3 ) 6)
;; (define (double n) (... n))  (template)


  #+end_src
- Stubs are for making sure that tests actually run. That is, that we have well formed tests.
- A *data definition* consists of four to five parts:
  - A possible *structure definition*
  - A *type comment* that defines a new type name andd describes how to form data of that type
  - An *interpretatioin* that describes the correspondence between information and data
  - One or more *examples* of the data
  - A *template* for a 1 argument function operating on data of this type
- An example of a combined data definition and function which operates on this data
  -
  [[attachment:_20210124_201202screenshot.png]]
- Most programs are driven by the form of the data, that is, they are *data-driven*; that is why there are data driven templates.
- Some other programs are driven by the *control structure*. Analogously, there are function design templates for problems which are driven by the control structure
-


** What are the main concepts of the text?
- Function Design Recipe
- Signature
- Purpose
- examples / tests
- stub
- Template

*** How to Design Functions Recipe
- How do we design a function for large enumerations ? An example is below. We
  deal with a single case at a time and treat the rest as else. This is related to *white-boxing*
   #+begin_src racket
(define (handle-key ws ke)
  (cond [(key=? ke " ") (... ws)]
        [else
         (... ws)]))
  #+end_src
**** Signature, purpose and stub.

Write the function signature, a one-line purpose statement and a function stub.

A signature has the type of each argument, separated by spaces, followed by ->, followed by the type of result. So a function that consumes an image and produces a number would have the signature Image -> Number.

Note that the stub is a syntactically complete function definition that produces a value of the right type. If the type is Number it is common to use 0, if the type is String it is common to use "a" and so on. The value will not, in general, match the purpose statement. In the example below the stub produces 0, which is a Number, but only matches the purpose when double happens to be called with 0.

;; Number -> Number
;; produces n times 2

(define (double n)  0)  ; this is the stub

The purpose of the stub is to serve as a kind of scaffolding to make it possible to run the examples even before the function design is complete. With the stub in place check-expects that call the function can run. Most of them will fail of course, but the fact that they can run at all allows you to ensure that they are at least well-formed: parentheses are balanced, function calls have the proper number of arguments, function and constant names are correct and so on. This is very important, the sooner you find a mistake -- even a simple one -- the easier it is to fix.

**** Define examples, wrap each one in check-expect.

Write at least one example of a call to the function and the expected result the call should produce.

You will often need more examples, to help you better understand the function or to properly test the function. (If once your function works and you run the program some of the code is highlighted in black it means you definitely do not have enough examples.) If you are unsure how to start writing examples use the combination of the function signature and the data definition(s) to help you generate examples. Often the example data from the data definition is useful, but it does not necessarily cover all the important cases for a particular function.

The first role of an example is to help you understand what the function is supposed to do. If there are boundary conditions be sure to include an example of them. If there are different behaviours the function should have, include an example of each. Since they are examples first, you could write them in this form:

;; (double 0) should produce 0
;; (double 1) should produce 2
;; (double 2) should produce 4

When you write examples it is sometimes helpful to write not just the expected result, but also how it is computed. For example, you might write the following instead of the above:

;; (double 0) should produce (* 0 2)
;; (double 1) should produce (* 1 2)
;; (double 2) should produce (* 2 2)

While the above form satisfies our need for examples, DrRacket gives us a better way to write them, by enclosing them in check-expect. This will allow DrRacket to check them automatically when the function is complete. (In technical terms it will turn the examples into unit tests.)

;; Number -> Number
;; produces n times 2
(check-expect (double 0) (* 0 2))
(check-expect (double 1) (* 1 2))
(check-expect (double 3) (* 3 2))

(define (double n)  0)  ; this is the stub

The existence of the stub will allow you to run the tests. Most (or even all) of the tests will fail since the stub is returning the same value every time. But you will at least be able to check that the parentheses are balanced, that you have not misspelled function names etc.

**** Template and inventory

Before coding the function body it is helpful to have a clear sense of what the function has to work with -- what is the contents of your bag of parts for coding this function? The template provides this.

Once the How to Design Data Definitions (HtDD) recipe in introduced, templates are produced by following the rules on the Data Driven Templates web page. You should copy the template from the data definition to the function design, rename the template, and write a comment that says where the template was copied from. Note that the template is copied from the data definition for the consumed type, not the produced type.

For primitive data like numbers, strings and images the body of the template is simply (... x) where x is the name of the parameter to the function.

Once the template is done the stub should be commented out.

;; Number -> Number
;; produces n times 2
(check-expect (double 0) (* 0 2))
(check-expect (double 1) (* 1 2))
(check-expect (double 3) (* 3 2))

;(define (double n) 0) ; this is the stub

(define (double n)     ; this is the template
  (... n))

It is also often useful to add constant values which are extremely likely to be useful to the template body at this point. For example, the template for a function that renders the state of a world program might have an MTS constant added to its body. This causes the template to include an inventory of useful constants.

**** Code the function body

Now complete the function body by filling in the template.

Note that:

- the signature tells you the type of the parameter(s) and the type of the data the function body must produce
- the purpose describes what the function body must produce in English
- the examples provide several concrete examples of what the function body must produce
- the template tells you the raw material you have to work with

You should use all of the above to help you code the function body. In some cases further rewriting of examples might make it more clear how you computed certain values, and that may make it easier to code the function.

;; Number -> Number
;; produces n times 2
(check-expect (double 0) (* 0 2))
(check-expect (double 1) (* 1 2))
(check-expect (double 3) (* 3 2))

;(define (double n) 0) ; this is the stub

;(define (double n)    ; this is the template
;  (... n))

(define (double n)
  (* n 2))

**** Test and debug until correct

Run the program and make sure all the tests pass, if not debug until they do. Many of the problems you might have had will already have been fixed because of following the "run early, run often" approach. But if not, debug until everything works.

*** How to Design Worlds Recipe

1. Domain analysis (use a piece of paper!)
   1. Sketch program scenarios
   2. Identify constant information
   3. Identify changing information
   4. Identify big-bang options

2. Build the actual program
   1. Constants (based on 1.2 above)
   2. Data definitions using HtDD (based on 1.3 above)
   3. Functions using HtDF
      - main first (based on 1.3, 1.4 and 2.2 above)
      - wish list entries for big-bang handlers
   4. Work through wish list until done

Example below
#+begin_src racket
(require 2htdp/image)
(require 2htdp/universe)

;; My world program  (make this more specific)

;; =================
;; Constants:


;; =================
;; Data definitions:

;; WS is ... (give WS a better name)



;; =================
;; Functions:

;; WS -> WS
;; start the world with ...
;;
(define (main ws)
  (big-bang ws                   ; WS
            (on-tick   tock)     ; WS -> WS
            (to-draw   render)   ; WS -> Image
            (stop-when ...)      ; WS -> Boolean
            (on-mouse  ...)      ; WS Integer Integer MouseEvent -> WS
            (on-key    ...)))    ; WS KeyEvent -> WS

;; WS -> WS
;; produce the next ...
;; !!!
(define (tock ws) ...)


;; WS -> Image
;; render ...
;; !!!
(define (render ws) ...)
#+end_src

#+begin_src racket
(require 2htdp/universe)
(require 2htdp/image)

;; A cat that walks across the screen.

;; Constants:

(define WIDTH  200)
(define HEIGHT 200)

(define CAT-IMG (circle 10 "solid" "red")) ; a not very attractive cat

(define MTS (empty-scene WIDTH HEIGHT))


;; Data definitions:

;; Cat is Number
;; interp. x coordinate of cat (in screen coordinates)
(define C1 1)
(define C2 30)

#;
(define (fn-for-cat c)
  (... c))


;; Functions:

;; Cat -> Cat
;; start the world with initial state c, for example: (main 0)
(define (main c)
  (big-bang c                         ; Cat
            (on-tick   tock)          ; Cat -> Cat
            (to-draw   render)))      ; Cat -> Image

;; Cat -> Cat
;; Produce cat at next position
;!!!
(define (tock c) 1)  ;stub

;; Cat -> Image
;; produce image with CAT-IMG placed on MTS at proper x, y position
; !!!
(define (render c) MTS)
#+end_src
