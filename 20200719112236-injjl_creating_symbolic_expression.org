#+title: injjl, Creating symbolic expression
#+OPTIONS: toc:nil


* Flashcard

** injl, How do we create a polynomial using metaprog? :fc:
:PROPERTIES:
:FC_CREATED: 2020-07-19T17:03:31Z
:FC_TYPE:  normal
:ID:       23b7b730-96ec-48c7-8445-db22e803d71b
:END:
:REVIEW_DATA:
| position | ease | box | interval | due                  |
|----------+------+-----+----------+----------------------|
| front    | 2.50 |   1 |     0.01 | 2020-07-24T15:10:23Z |
:END:



*** Back
One possibility is to use strings and parse it.
#+BEGIN_SRC julia :results ouput
vs(N) = ["v^$i" for i=1:N]
@eval f1(v) = $(foldl(((x,y) -> x * "+" * y), vs(10), init = "0") |> Meta.parse)

foopattern(xs) = ml.@match (xs) begin
    []  => "0";
    [x, xs...]  => x *  "+" * foopattern(xs)
end

@eval f2(v) = $(Meta.parse(foopattern(vs(10))))
f1(2)
#+END_SRC

#+RESULTS:

In haskell this fold could be done with:
#+BEGIN_SRC haskell
-- Symbolic
foopattern :: [String] -> String
foopattern [] = "0"
foopattern (x:xs) = x ++ "+ "  ++ foopattern xs

#+END_SRC
