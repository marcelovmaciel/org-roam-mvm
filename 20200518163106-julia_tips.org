#+TITLE: Julia Tips

- tags :: [[file:20200516152708-programming.org][Programming]],


* Tutorials
- [[https://github.com/johnmyleswhite/julia_tutorials][GitHub - johnmyleswhite/julia_tutorials: Tutorials on Julia topics]]
- [[https://avt.im/blog/2018/03/23/R-packages-ggplot-in-julia][How to use R packages such as ggplot in Julia | Alexander Terenin]]


* Introspection
** injl, How does one get all the symbols within a module? :fc:
:PROPERTIES:
:FC_CREATED: 2020-07-04T01:28:21Z
:FC_TYPE:  normal
:ID:       b2d57465-49fe-40f3-8a3d-91c759da0fcd
:END:
:REVIEW_DATA:
| position | ease | box | interval | due                  |
|----------+------+-----+----------+----------------------|
| front    |  2.5 |   0 |        0 | 2020-07-04T01:28:21Z |
:END:
*** Back


- With the ~names~ proc.

** How does one build a Pkg documentation locally
- By running the ~docs/make.jl~ in the Pkg source.

Actually one has to copy the folder of the package. Change permissions. And then run

#+BEGIN_SRC shell :eval no
julia --project=docs/ -e 'using Pkg; Pkg.develop(PackageSpec(path=pwd())); Pkg.instantiate()'
julia --project=docs/ docs/make.jl
#+END_SRC


IF there was no permission problem one could do the following:
#+BEGIN_SRC julia :eval no
using Pkg, Cuba
pkgdir = dirname(dirname(pathof(Cuba)))
docsdir = joinpath(pkgdir, "docs")
Pkg.activate(docsdir)
Pkg.develop(PackageSpec(path=pkgdir))
Pkg.instantiate()
include(joinpath(docsdir, "make.jl"))

#+END_SRC



* Quick tips
** How can I simplify an Agent constructor? :fc:
:PROPERTIES:
:FC_CREATED: 2020-07-07T11:55:06Z
:FC_TYPE:  normal
:ID:       7d0fcf93-cf5a-4270-9f91-cf1e8ba1771e
:END:
:REVIEW_DATA:
| position | ease | box | interval | due                  |
|----------+------+-----+----------+----------------------|
| front    | 2.50 |   0 |     0.00 | 2020-09-01T23:06:33Z |
:END:

*** Back
Using Parameters.jl:
#+ATTR_ORG: :width 400
[[file:~/Drive/Org/imgs/parameters.jpeg]]


** How do we download stuff from the internet using julia? :fc:
:PROPERTIES:
:FC_CREATED: 2020-07-10T16:47:12Z
:FC_TYPE:  normal
:ID:       28523cb7-5af6-4047-a922-7d12a695b8b2
:END:
:REVIEW_DATA:
| position | ease | box | interval | due                  |
|----------+------+-----+----------+----------------------|
| front    |  2.5 |   0 |        0 | 2020-07-10T16:47:12Z |
:END:

** Back
There are two approaches.
One is to use a combination of Http.download, Logging and TerminalLoggers.
https://discourse.julialang.org/t/ann-urldownload-jl/37841/2?u=marcelovmaciel

- Link to terminal loggers [[https://github.com/c42f/TerminalLoggers.jl][GitHub - c42f/TerminalLoggers.jl: Logging sinks and utilites for interactive ...]]


Another is simply to use: https://github.com/Arkoniak/UrlDownload.jl
* injl, How do we create a polynomial using metaprog? :fc:
:PROPERTIES:
:FC_CREATED: 2020-07-19T17:03:31Z
:FC_TYPE:  normal
:ID:       23b7b730-96ec-48c7-8445-db22e803d71b
:END:
:REVIEW_DATA:
| position | ease | box | interval | due                  |
|----------+------+-----+----------+----------------------|
| front    | 2.50 |   1 |     0.01 | 2020-07-24T15:10:23Z |
:END:



** Back
One possibility is to use strings and parse it.
#+BEGIN_SRC julia :results ouput
vs(N) = ["v^$i" for i=1:N]
@eval f1(v) = $(foldl(((x,y) -> x * "+" * y), vs(10), init = "0") |> Meta.parse)

foopattern(xs) = ml.@match (xs) begin
    []  => "0";
    [x, xs...]  => x *  "+" * foopattern(xs)
end

@eval f2(v) = $(Meta.parse(foopattern(vs(10))))
f1(2)
#+END_SRC

#+RESULTS:

In haskell this fold could be done with:
#+BEGIN_SRC haskell
-- Symbolic
foopattern :: [String] -> String
foopattern [] = "0"
foopattern (x:xs) = x ++ "+ "  ++ foopattern xs

#+END_SRC
* injl, how does `let` scoping work? :fc:
:PROPERTIES:
:FC_CREATED: 2020-09-10T13:36:56Z
:FC_TYPE:  normal
:ID:       d28fc0c0-72f2-4d27-b6a4-733b030ed3c7
:END:
:REVIEW_DATA:
| position | ease | box | interval | due                  |
|----------+------+-----+----------+----------------------|
| front    |  2.5 |   0 |        0 | 2020-09-10T13:36:56Z |
:END:
*** Back
Mason Protter: When you write

#+BEGIN_SRC julia
let x = y
    stuff
end

#it is kinda like writing

((x) -> stuff)(y)

#at least for the purposes of scoping of variables. On the other hand, when you write

let
    x = y
    stuff
end

#it is kinda like writing

(() -> (x = y; stuff))()
#+END_SRC

Mason Protter: This is really important if you're writing let blocks in the
global scope, because if I write

#+BEGIN_SRC julia
y = 1
let
    x = y
    stuff(x)
end

# y is a global variable in that block and there will be a performance penalty

# wheras there are no global variables involved at runtime when I write

y = 1
let x = y
    stuff(x)
end

#+END_SRC
